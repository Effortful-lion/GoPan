// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.0--rc3
// source: uploadService.proto

package uploadPb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	UploadService_UploadHandlerPost_FullMethodName        = "/uploadService.UploadService/UploadHandlerPost"
	UploadService_TryFastUploadHandler_FullMethodName     = "/uploadService.UploadService/TryFastUploadHandler"
	UploadService_InitMultipartUpload_FullMethodName      = "/uploadService.UploadService/InitMultipartUpload"
	UploadService_UploadPartHandler_FullMethodName        = "/uploadService.UploadService/UploadPartHandler"
	UploadService_CompleteUploadHandler_FullMethodName    = "/uploadService.UploadService/CompleteUploadHandler"
	UploadService_CancelUploadHandler_FullMethodName      = "/uploadService.UploadService/CancelUploadHandler"
	UploadService_QueryUploadStatusHandler_FullMethodName = "/uploadService.UploadService/QueryUploadStatusHandler"
)

// UploadServiceClient is the client API for UploadService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 上传服务定义（方法名与handler一一对应）
type UploadServiceClient interface {
	// 普通文件上传（对应UploadHandler）
	UploadHandlerPost(ctx context.Context, in *UploadRequest, opts ...grpc.CallOption) (*UploadResponse, error)
	// 秒传校验（对应TryFastUploadHandler）
	TryFastUploadHandler(ctx context.Context, in *TryFastUploadRequest, opts ...grpc.CallOption) (*TryFastUploadResponse, error)
	// 分块上传初始化（对应InitialMultipartUploadHandler）
	InitMultipartUpload(ctx context.Context, in *InitMultipartUploadRequest, opts ...grpc.CallOption) (*InitMultipartUploadResponse, error)
	// 分块上传（对应UploadPartHandler）
	UploadPartHandler(ctx context.Context, in *UploadPartRequest, opts ...grpc.CallOption) (*UploadPartResponse, error)
	// 分块合并（对应CompleteUploadHandler）
	CompleteUploadHandler(ctx context.Context, in *CompleteUploadRequest, opts ...grpc.CallOption) (*CompleteUploadResponse, error)
	// 取消上传（对应CancelUploadHandler）
	CancelUploadHandler(ctx context.Context, in *CancelUploadRequest, opts ...grpc.CallOption) (*CancelUploadResponse, error)
	// 查询上传状态（对应QueryUploadStatusHandler）
	QueryUploadStatusHandler(ctx context.Context, in *QueryUploadStatusRequest, opts ...grpc.CallOption) (*QueryUploadStatusResponse, error)
}

type uploadServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUploadServiceClient(cc grpc.ClientConnInterface) UploadServiceClient {
	return &uploadServiceClient{cc}
}

func (c *uploadServiceClient) UploadHandlerPost(ctx context.Context, in *UploadRequest, opts ...grpc.CallOption) (*UploadResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UploadResponse)
	err := c.cc.Invoke(ctx, UploadService_UploadHandlerPost_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uploadServiceClient) TryFastUploadHandler(ctx context.Context, in *TryFastUploadRequest, opts ...grpc.CallOption) (*TryFastUploadResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TryFastUploadResponse)
	err := c.cc.Invoke(ctx, UploadService_TryFastUploadHandler_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uploadServiceClient) InitMultipartUpload(ctx context.Context, in *InitMultipartUploadRequest, opts ...grpc.CallOption) (*InitMultipartUploadResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InitMultipartUploadResponse)
	err := c.cc.Invoke(ctx, UploadService_InitMultipartUpload_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uploadServiceClient) UploadPartHandler(ctx context.Context, in *UploadPartRequest, opts ...grpc.CallOption) (*UploadPartResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UploadPartResponse)
	err := c.cc.Invoke(ctx, UploadService_UploadPartHandler_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uploadServiceClient) CompleteUploadHandler(ctx context.Context, in *CompleteUploadRequest, opts ...grpc.CallOption) (*CompleteUploadResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CompleteUploadResponse)
	err := c.cc.Invoke(ctx, UploadService_CompleteUploadHandler_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uploadServiceClient) CancelUploadHandler(ctx context.Context, in *CancelUploadRequest, opts ...grpc.CallOption) (*CancelUploadResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CancelUploadResponse)
	err := c.cc.Invoke(ctx, UploadService_CancelUploadHandler_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uploadServiceClient) QueryUploadStatusHandler(ctx context.Context, in *QueryUploadStatusRequest, opts ...grpc.CallOption) (*QueryUploadStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryUploadStatusResponse)
	err := c.cc.Invoke(ctx, UploadService_QueryUploadStatusHandler_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UploadServiceServer is the server API for UploadService service.
// All implementations must embed UnimplementedUploadServiceServer
// for forward compatibility.
//
// 上传服务定义（方法名与handler一一对应）
type UploadServiceServer interface {
	// 普通文件上传（对应UploadHandler）
	UploadHandlerPost(context.Context, *UploadRequest) (*UploadResponse, error)
	// 秒传校验（对应TryFastUploadHandler）
	TryFastUploadHandler(context.Context, *TryFastUploadRequest) (*TryFastUploadResponse, error)
	// 分块上传初始化（对应InitialMultipartUploadHandler）
	InitMultipartUpload(context.Context, *InitMultipartUploadRequest) (*InitMultipartUploadResponse, error)
	// 分块上传（对应UploadPartHandler）
	UploadPartHandler(context.Context, *UploadPartRequest) (*UploadPartResponse, error)
	// 分块合并（对应CompleteUploadHandler）
	CompleteUploadHandler(context.Context, *CompleteUploadRequest) (*CompleteUploadResponse, error)
	// 取消上传（对应CancelUploadHandler）
	CancelUploadHandler(context.Context, *CancelUploadRequest) (*CancelUploadResponse, error)
	// 查询上传状态（对应QueryUploadStatusHandler）
	QueryUploadStatusHandler(context.Context, *QueryUploadStatusRequest) (*QueryUploadStatusResponse, error)
	mustEmbedUnimplementedUploadServiceServer()
}

// UnimplementedUploadServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUploadServiceServer struct{}

func (UnimplementedUploadServiceServer) UploadHandlerPost(context.Context, *UploadRequest) (*UploadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadHandlerPost not implemented")
}
func (UnimplementedUploadServiceServer) TryFastUploadHandler(context.Context, *TryFastUploadRequest) (*TryFastUploadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TryFastUploadHandler not implemented")
}
func (UnimplementedUploadServiceServer) InitMultipartUpload(context.Context, *InitMultipartUploadRequest) (*InitMultipartUploadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitMultipartUpload not implemented")
}
func (UnimplementedUploadServiceServer) UploadPartHandler(context.Context, *UploadPartRequest) (*UploadPartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadPartHandler not implemented")
}
func (UnimplementedUploadServiceServer) CompleteUploadHandler(context.Context, *CompleteUploadRequest) (*CompleteUploadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompleteUploadHandler not implemented")
}
func (UnimplementedUploadServiceServer) CancelUploadHandler(context.Context, *CancelUploadRequest) (*CancelUploadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelUploadHandler not implemented")
}
func (UnimplementedUploadServiceServer) QueryUploadStatusHandler(context.Context, *QueryUploadStatusRequest) (*QueryUploadStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryUploadStatusHandler not implemented")
}
func (UnimplementedUploadServiceServer) mustEmbedUnimplementedUploadServiceServer() {}
func (UnimplementedUploadServiceServer) testEmbeddedByValue()                       {}

// UnsafeUploadServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UploadServiceServer will
// result in compilation errors.
type UnsafeUploadServiceServer interface {
	mustEmbedUnimplementedUploadServiceServer()
}

func RegisterUploadServiceServer(s grpc.ServiceRegistrar, srv UploadServiceServer) {
	// If the following call pancis, it indicates UnimplementedUploadServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&UploadService_ServiceDesc, srv)
}

func _UploadService_UploadHandlerPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UploadServiceServer).UploadHandlerPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UploadService_UploadHandlerPost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UploadServiceServer).UploadHandlerPost(ctx, req.(*UploadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UploadService_TryFastUploadHandler_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TryFastUploadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UploadServiceServer).TryFastUploadHandler(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UploadService_TryFastUploadHandler_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UploadServiceServer).TryFastUploadHandler(ctx, req.(*TryFastUploadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UploadService_InitMultipartUpload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitMultipartUploadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UploadServiceServer).InitMultipartUpload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UploadService_InitMultipartUpload_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UploadServiceServer).InitMultipartUpload(ctx, req.(*InitMultipartUploadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UploadService_UploadPartHandler_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadPartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UploadServiceServer).UploadPartHandler(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UploadService_UploadPartHandler_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UploadServiceServer).UploadPartHandler(ctx, req.(*UploadPartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UploadService_CompleteUploadHandler_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompleteUploadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UploadServiceServer).CompleteUploadHandler(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UploadService_CompleteUploadHandler_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UploadServiceServer).CompleteUploadHandler(ctx, req.(*CompleteUploadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UploadService_CancelUploadHandler_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelUploadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UploadServiceServer).CancelUploadHandler(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UploadService_CancelUploadHandler_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UploadServiceServer).CancelUploadHandler(ctx, req.(*CancelUploadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UploadService_QueryUploadStatusHandler_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryUploadStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UploadServiceServer).QueryUploadStatusHandler(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UploadService_QueryUploadStatusHandler_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UploadServiceServer).QueryUploadStatusHandler(ctx, req.(*QueryUploadStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UploadService_ServiceDesc is the grpc.ServiceDesc for UploadService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UploadService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "uploadService.UploadService",
	HandlerType: (*UploadServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UploadHandlerPost",
			Handler:    _UploadService_UploadHandlerPost_Handler,
		},
		{
			MethodName: "TryFastUploadHandler",
			Handler:    _UploadService_TryFastUploadHandler_Handler,
		},
		{
			MethodName: "InitMultipartUpload",
			Handler:    _UploadService_InitMultipartUpload_Handler,
		},
		{
			MethodName: "UploadPartHandler",
			Handler:    _UploadService_UploadPartHandler_Handler,
		},
		{
			MethodName: "CompleteUploadHandler",
			Handler:    _UploadService_CompleteUploadHandler_Handler,
		},
		{
			MethodName: "CancelUploadHandler",
			Handler:    _UploadService_CancelUploadHandler_Handler,
		},
		{
			MethodName: "QueryUploadStatusHandler",
			Handler:    _UploadService_QueryUploadStatusHandler_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "uploadService.proto",
}
