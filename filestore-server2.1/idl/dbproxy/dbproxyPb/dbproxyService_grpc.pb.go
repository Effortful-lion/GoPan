// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.0--rc3
// source: dbproxyService.proto

package dbproxyPb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DBProxyService_GetFileMetaHandler_FullMethodName       = "/DBProxyService.DBProxyService/GetFileMetaHandler"
	DBProxyService_FileMetaUpdateHandler_FullMethodName    = "/DBProxyService.DBProxyService/FileMetaUpdateHandler"
	DBProxyService_FileDeleteHandler_FullMethodName        = "/DBProxyService.DBProxyService/FileDeleteHandler"
	DBProxyService_FileQueryHandler_FullMethodName         = "/DBProxyService.DBProxyService/FileQueryHandler"
	DBProxyService_FileMetaUpdateAll_FullMethodName        = "/DBProxyService.DBProxyService/FileMetaUpdateAll"
	DBProxyService_OnUserFileUploadFinished_FullMethodName = "/DBProxyService.DBProxyService/OnUserFileUploadFinished"
	DBProxyService_CacheChunk_FullMethodName               = "/DBProxyService.DBProxyService/CacheChunk"
	DBProxyService_CacheChunkUpdate_FullMethodName         = "/DBProxyService.DBProxyService/CacheChunkUpdate"
	DBProxyService_CacheChunkQuery_FullMethodName          = "/DBProxyService.DBProxyService/CacheChunkQuery"
	DBProxyService_CacheChunkDelete_FullMethodName         = "/DBProxyService.DBProxyService/CacheChunkDelete"
	DBProxyService_OnFileUploadFinished_FullMethodName     = "/DBProxyService.DBProxyService/OnFileUploadFinished"
	DBProxyService_CheckPassword_FullMethodName            = "/DBProxyService.DBProxyService/CheckPassword"
	DBProxyService_UserSignUp_FullMethodName               = "/DBProxyService.DBProxyService/UserSignUp"
	DBProxyService_UpdateToken_FullMethodName              = "/DBProxyService.DBProxyService/UpdateToken"
	DBProxyService_GetUserInfo_FullMethodName              = "/DBProxyService.DBProxyService/GetUserInfo"
	DBProxyService_UpdateFileLocation_FullMethodName       = "/DBProxyService.DBProxyService/UpdateFileLocation"
)

// DBProxyServiceClient is the client API for DBProxyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 文件元信息服务（保持核心接口不变）
type DBProxyServiceClient interface {
	GetFileMetaHandler(ctx context.Context, in *GetFileMetaRequest, opts ...grpc.CallOption) (*GetFileMetaResponse, error)
	FileMetaUpdateHandler(ctx context.Context, in *FileMetaUpdateRequest, opts ...grpc.CallOption) (*FileMetaUpdateResponse, error)
	FileDeleteHandler(ctx context.Context, in *FileDeleteRequest, opts ...grpc.CallOption) (*FileDeleteResponse, error)
	FileQueryHandler(ctx context.Context, in *FileQueryRequest, opts ...grpc.CallOption) (*FileQueryResponse, error)
	// meta/op
	FileMetaUpdateAll(ctx context.Context, in *UpdateFileMetaRequest, opts ...grpc.CallOption) (*UpdateFileMetaResp, error)
	OnUserFileUploadFinished(ctx context.Context, in *OnUserFileUploadFinishedRequest, opts ...grpc.CallOption) (*OnUserFileUploadFinishedResp, error)
	// redis
	CacheChunk(ctx context.Context, in *CacheChunkRequest, opts ...grpc.CallOption) (*CacheChunkResp, error)
	CacheChunkUpdate(ctx context.Context, in *CacheChunkUpdateRequest, opts ...grpc.CallOption) (*CacheChunkUpdateResp, error)
	CacheChunkQuery(ctx context.Context, in *CacheChunkQueryRequest, opts ...grpc.CallOption) (*CacheChunkQueryResp, error)
	CacheChunkDelete(ctx context.Context, in *CacheChunkDeleteRequest, opts ...grpc.CallOption) (*CacheChunkDeleteResp, error)
	OnFileUploadFinished(ctx context.Context, in *OnFileUploadFinishedRequest, opts ...grpc.CallOption) (*OnFileUploadFinishedResp, error)
	CheckPassword(ctx context.Context, in *CheckPasswordRequest, opts ...grpc.CallOption) (*CheckPasswordResponse, error)
	UserSignUp(ctx context.Context, in *SignupRequest, opts ...grpc.CallOption) (*SignupResponse, error)
	UpdateToken(ctx context.Context, in *UpdateTokenRequest, opts ...grpc.CallOption) (*UpdateTokenResp, error)
	GetUserInfo(ctx context.Context, in *GetUserInfoRequest, opts ...grpc.CallOption) (*UserInfoResp, error)
	UpdateFileLocation(ctx context.Context, in *UpdateFileLocationRequest, opts ...grpc.CallOption) (*UpdateFileLocationResp, error)
}

type dBProxyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDBProxyServiceClient(cc grpc.ClientConnInterface) DBProxyServiceClient {
	return &dBProxyServiceClient{cc}
}

func (c *dBProxyServiceClient) GetFileMetaHandler(ctx context.Context, in *GetFileMetaRequest, opts ...grpc.CallOption) (*GetFileMetaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFileMetaResponse)
	err := c.cc.Invoke(ctx, DBProxyService_GetFileMetaHandler_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBProxyServiceClient) FileMetaUpdateHandler(ctx context.Context, in *FileMetaUpdateRequest, opts ...grpc.CallOption) (*FileMetaUpdateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FileMetaUpdateResponse)
	err := c.cc.Invoke(ctx, DBProxyService_FileMetaUpdateHandler_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBProxyServiceClient) FileDeleteHandler(ctx context.Context, in *FileDeleteRequest, opts ...grpc.CallOption) (*FileDeleteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FileDeleteResponse)
	err := c.cc.Invoke(ctx, DBProxyService_FileDeleteHandler_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBProxyServiceClient) FileQueryHandler(ctx context.Context, in *FileQueryRequest, opts ...grpc.CallOption) (*FileQueryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FileQueryResponse)
	err := c.cc.Invoke(ctx, DBProxyService_FileQueryHandler_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBProxyServiceClient) FileMetaUpdateAll(ctx context.Context, in *UpdateFileMetaRequest, opts ...grpc.CallOption) (*UpdateFileMetaResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateFileMetaResp)
	err := c.cc.Invoke(ctx, DBProxyService_FileMetaUpdateAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBProxyServiceClient) OnUserFileUploadFinished(ctx context.Context, in *OnUserFileUploadFinishedRequest, opts ...grpc.CallOption) (*OnUserFileUploadFinishedResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OnUserFileUploadFinishedResp)
	err := c.cc.Invoke(ctx, DBProxyService_OnUserFileUploadFinished_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBProxyServiceClient) CacheChunk(ctx context.Context, in *CacheChunkRequest, opts ...grpc.CallOption) (*CacheChunkResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CacheChunkResp)
	err := c.cc.Invoke(ctx, DBProxyService_CacheChunk_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBProxyServiceClient) CacheChunkUpdate(ctx context.Context, in *CacheChunkUpdateRequest, opts ...grpc.CallOption) (*CacheChunkUpdateResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CacheChunkUpdateResp)
	err := c.cc.Invoke(ctx, DBProxyService_CacheChunkUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBProxyServiceClient) CacheChunkQuery(ctx context.Context, in *CacheChunkQueryRequest, opts ...grpc.CallOption) (*CacheChunkQueryResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CacheChunkQueryResp)
	err := c.cc.Invoke(ctx, DBProxyService_CacheChunkQuery_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBProxyServiceClient) CacheChunkDelete(ctx context.Context, in *CacheChunkDeleteRequest, opts ...grpc.CallOption) (*CacheChunkDeleteResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CacheChunkDeleteResp)
	err := c.cc.Invoke(ctx, DBProxyService_CacheChunkDelete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBProxyServiceClient) OnFileUploadFinished(ctx context.Context, in *OnFileUploadFinishedRequest, opts ...grpc.CallOption) (*OnFileUploadFinishedResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OnFileUploadFinishedResp)
	err := c.cc.Invoke(ctx, DBProxyService_OnFileUploadFinished_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBProxyServiceClient) CheckPassword(ctx context.Context, in *CheckPasswordRequest, opts ...grpc.CallOption) (*CheckPasswordResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckPasswordResponse)
	err := c.cc.Invoke(ctx, DBProxyService_CheckPassword_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBProxyServiceClient) UserSignUp(ctx context.Context, in *SignupRequest, opts ...grpc.CallOption) (*SignupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SignupResponse)
	err := c.cc.Invoke(ctx, DBProxyService_UserSignUp_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBProxyServiceClient) UpdateToken(ctx context.Context, in *UpdateTokenRequest, opts ...grpc.CallOption) (*UpdateTokenResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateTokenResp)
	err := c.cc.Invoke(ctx, DBProxyService_UpdateToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBProxyServiceClient) GetUserInfo(ctx context.Context, in *GetUserInfoRequest, opts ...grpc.CallOption) (*UserInfoResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserInfoResp)
	err := c.cc.Invoke(ctx, DBProxyService_GetUserInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBProxyServiceClient) UpdateFileLocation(ctx context.Context, in *UpdateFileLocationRequest, opts ...grpc.CallOption) (*UpdateFileLocationResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateFileLocationResp)
	err := c.cc.Invoke(ctx, DBProxyService_UpdateFileLocation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DBProxyServiceServer is the server API for DBProxyService service.
// All implementations must embed UnimplementedDBProxyServiceServer
// for forward compatibility.
//
// 文件元信息服务（保持核心接口不变）
type DBProxyServiceServer interface {
	GetFileMetaHandler(context.Context, *GetFileMetaRequest) (*GetFileMetaResponse, error)
	FileMetaUpdateHandler(context.Context, *FileMetaUpdateRequest) (*FileMetaUpdateResponse, error)
	FileDeleteHandler(context.Context, *FileDeleteRequest) (*FileDeleteResponse, error)
	FileQueryHandler(context.Context, *FileQueryRequest) (*FileQueryResponse, error)
	// meta/op
	FileMetaUpdateAll(context.Context, *UpdateFileMetaRequest) (*UpdateFileMetaResp, error)
	OnUserFileUploadFinished(context.Context, *OnUserFileUploadFinishedRequest) (*OnUserFileUploadFinishedResp, error)
	// redis
	CacheChunk(context.Context, *CacheChunkRequest) (*CacheChunkResp, error)
	CacheChunkUpdate(context.Context, *CacheChunkUpdateRequest) (*CacheChunkUpdateResp, error)
	CacheChunkQuery(context.Context, *CacheChunkQueryRequest) (*CacheChunkQueryResp, error)
	CacheChunkDelete(context.Context, *CacheChunkDeleteRequest) (*CacheChunkDeleteResp, error)
	OnFileUploadFinished(context.Context, *OnFileUploadFinishedRequest) (*OnFileUploadFinishedResp, error)
	CheckPassword(context.Context, *CheckPasswordRequest) (*CheckPasswordResponse, error)
	UserSignUp(context.Context, *SignupRequest) (*SignupResponse, error)
	UpdateToken(context.Context, *UpdateTokenRequest) (*UpdateTokenResp, error)
	GetUserInfo(context.Context, *GetUserInfoRequest) (*UserInfoResp, error)
	UpdateFileLocation(context.Context, *UpdateFileLocationRequest) (*UpdateFileLocationResp, error)
	mustEmbedUnimplementedDBProxyServiceServer()
}

// UnimplementedDBProxyServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDBProxyServiceServer struct{}

func (UnimplementedDBProxyServiceServer) GetFileMetaHandler(context.Context, *GetFileMetaRequest) (*GetFileMetaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFileMetaHandler not implemented")
}
func (UnimplementedDBProxyServiceServer) FileMetaUpdateHandler(context.Context, *FileMetaUpdateRequest) (*FileMetaUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FileMetaUpdateHandler not implemented")
}
func (UnimplementedDBProxyServiceServer) FileDeleteHandler(context.Context, *FileDeleteRequest) (*FileDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FileDeleteHandler not implemented")
}
func (UnimplementedDBProxyServiceServer) FileQueryHandler(context.Context, *FileQueryRequest) (*FileQueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FileQueryHandler not implemented")
}
func (UnimplementedDBProxyServiceServer) FileMetaUpdateAll(context.Context, *UpdateFileMetaRequest) (*UpdateFileMetaResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FileMetaUpdateAll not implemented")
}
func (UnimplementedDBProxyServiceServer) OnUserFileUploadFinished(context.Context, *OnUserFileUploadFinishedRequest) (*OnUserFileUploadFinishedResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnUserFileUploadFinished not implemented")
}
func (UnimplementedDBProxyServiceServer) CacheChunk(context.Context, *CacheChunkRequest) (*CacheChunkResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CacheChunk not implemented")
}
func (UnimplementedDBProxyServiceServer) CacheChunkUpdate(context.Context, *CacheChunkUpdateRequest) (*CacheChunkUpdateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CacheChunkUpdate not implemented")
}
func (UnimplementedDBProxyServiceServer) CacheChunkQuery(context.Context, *CacheChunkQueryRequest) (*CacheChunkQueryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CacheChunkQuery not implemented")
}
func (UnimplementedDBProxyServiceServer) CacheChunkDelete(context.Context, *CacheChunkDeleteRequest) (*CacheChunkDeleteResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CacheChunkDelete not implemented")
}
func (UnimplementedDBProxyServiceServer) OnFileUploadFinished(context.Context, *OnFileUploadFinishedRequest) (*OnFileUploadFinishedResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnFileUploadFinished not implemented")
}
func (UnimplementedDBProxyServiceServer) CheckPassword(context.Context, *CheckPasswordRequest) (*CheckPasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckPassword not implemented")
}
func (UnimplementedDBProxyServiceServer) UserSignUp(context.Context, *SignupRequest) (*SignupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserSignUp not implemented")
}
func (UnimplementedDBProxyServiceServer) UpdateToken(context.Context, *UpdateTokenRequest) (*UpdateTokenResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateToken not implemented")
}
func (UnimplementedDBProxyServiceServer) GetUserInfo(context.Context, *GetUserInfoRequest) (*UserInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserInfo not implemented")
}
func (UnimplementedDBProxyServiceServer) UpdateFileLocation(context.Context, *UpdateFileLocationRequest) (*UpdateFileLocationResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFileLocation not implemented")
}
func (UnimplementedDBProxyServiceServer) mustEmbedUnimplementedDBProxyServiceServer() {}
func (UnimplementedDBProxyServiceServer) testEmbeddedByValue()                        {}

// UnsafeDBProxyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DBProxyServiceServer will
// result in compilation errors.
type UnsafeDBProxyServiceServer interface {
	mustEmbedUnimplementedDBProxyServiceServer()
}

func RegisterDBProxyServiceServer(s grpc.ServiceRegistrar, srv DBProxyServiceServer) {
	// If the following call pancis, it indicates UnimplementedDBProxyServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DBProxyService_ServiceDesc, srv)
}

func _DBProxyService_GetFileMetaHandler_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFileMetaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBProxyServiceServer).GetFileMetaHandler(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DBProxyService_GetFileMetaHandler_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBProxyServiceServer).GetFileMetaHandler(ctx, req.(*GetFileMetaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBProxyService_FileMetaUpdateHandler_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileMetaUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBProxyServiceServer).FileMetaUpdateHandler(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DBProxyService_FileMetaUpdateHandler_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBProxyServiceServer).FileMetaUpdateHandler(ctx, req.(*FileMetaUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBProxyService_FileDeleteHandler_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBProxyServiceServer).FileDeleteHandler(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DBProxyService_FileDeleteHandler_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBProxyServiceServer).FileDeleteHandler(ctx, req.(*FileDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBProxyService_FileQueryHandler_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBProxyServiceServer).FileQueryHandler(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DBProxyService_FileQueryHandler_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBProxyServiceServer).FileQueryHandler(ctx, req.(*FileQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBProxyService_FileMetaUpdateAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFileMetaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBProxyServiceServer).FileMetaUpdateAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DBProxyService_FileMetaUpdateAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBProxyServiceServer).FileMetaUpdateAll(ctx, req.(*UpdateFileMetaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBProxyService_OnUserFileUploadFinished_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OnUserFileUploadFinishedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBProxyServiceServer).OnUserFileUploadFinished(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DBProxyService_OnUserFileUploadFinished_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBProxyServiceServer).OnUserFileUploadFinished(ctx, req.(*OnUserFileUploadFinishedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBProxyService_CacheChunk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CacheChunkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBProxyServiceServer).CacheChunk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DBProxyService_CacheChunk_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBProxyServiceServer).CacheChunk(ctx, req.(*CacheChunkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBProxyService_CacheChunkUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CacheChunkUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBProxyServiceServer).CacheChunkUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DBProxyService_CacheChunkUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBProxyServiceServer).CacheChunkUpdate(ctx, req.(*CacheChunkUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBProxyService_CacheChunkQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CacheChunkQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBProxyServiceServer).CacheChunkQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DBProxyService_CacheChunkQuery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBProxyServiceServer).CacheChunkQuery(ctx, req.(*CacheChunkQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBProxyService_CacheChunkDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CacheChunkDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBProxyServiceServer).CacheChunkDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DBProxyService_CacheChunkDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBProxyServiceServer).CacheChunkDelete(ctx, req.(*CacheChunkDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBProxyService_OnFileUploadFinished_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OnFileUploadFinishedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBProxyServiceServer).OnFileUploadFinished(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DBProxyService_OnFileUploadFinished_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBProxyServiceServer).OnFileUploadFinished(ctx, req.(*OnFileUploadFinishedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBProxyService_CheckPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBProxyServiceServer).CheckPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DBProxyService_CheckPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBProxyServiceServer).CheckPassword(ctx, req.(*CheckPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBProxyService_UserSignUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBProxyServiceServer).UserSignUp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DBProxyService_UserSignUp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBProxyServiceServer).UserSignUp(ctx, req.(*SignupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBProxyService_UpdateToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBProxyServiceServer).UpdateToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DBProxyService_UpdateToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBProxyServiceServer).UpdateToken(ctx, req.(*UpdateTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBProxyService_GetUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBProxyServiceServer).GetUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DBProxyService_GetUserInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBProxyServiceServer).GetUserInfo(ctx, req.(*GetUserInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBProxyService_UpdateFileLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFileLocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBProxyServiceServer).UpdateFileLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DBProxyService_UpdateFileLocation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBProxyServiceServer).UpdateFileLocation(ctx, req.(*UpdateFileLocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DBProxyService_ServiceDesc is the grpc.ServiceDesc for DBProxyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DBProxyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "DBProxyService.DBProxyService",
	HandlerType: (*DBProxyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFileMetaHandler",
			Handler:    _DBProxyService_GetFileMetaHandler_Handler,
		},
		{
			MethodName: "FileMetaUpdateHandler",
			Handler:    _DBProxyService_FileMetaUpdateHandler_Handler,
		},
		{
			MethodName: "FileDeleteHandler",
			Handler:    _DBProxyService_FileDeleteHandler_Handler,
		},
		{
			MethodName: "FileQueryHandler",
			Handler:    _DBProxyService_FileQueryHandler_Handler,
		},
		{
			MethodName: "FileMetaUpdateAll",
			Handler:    _DBProxyService_FileMetaUpdateAll_Handler,
		},
		{
			MethodName: "OnUserFileUploadFinished",
			Handler:    _DBProxyService_OnUserFileUploadFinished_Handler,
		},
		{
			MethodName: "CacheChunk",
			Handler:    _DBProxyService_CacheChunk_Handler,
		},
		{
			MethodName: "CacheChunkUpdate",
			Handler:    _DBProxyService_CacheChunkUpdate_Handler,
		},
		{
			MethodName: "CacheChunkQuery",
			Handler:    _DBProxyService_CacheChunkQuery_Handler,
		},
		{
			MethodName: "CacheChunkDelete",
			Handler:    _DBProxyService_CacheChunkDelete_Handler,
		},
		{
			MethodName: "OnFileUploadFinished",
			Handler:    _DBProxyService_OnFileUploadFinished_Handler,
		},
		{
			MethodName: "CheckPassword",
			Handler:    _DBProxyService_CheckPassword_Handler,
		},
		{
			MethodName: "UserSignUp",
			Handler:    _DBProxyService_UserSignUp_Handler,
		},
		{
			MethodName: "UpdateToken",
			Handler:    _DBProxyService_UpdateToken_Handler,
		},
		{
			MethodName: "GetUserInfo",
			Handler:    _DBProxyService_GetUserInfo_Handler,
		},
		{
			MethodName: "UpdateFileLocation",
			Handler:    _DBProxyService_UpdateFileLocation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dbproxyService.proto",
}
